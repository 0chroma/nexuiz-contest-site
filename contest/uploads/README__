            == Java GIT and Eclipse GIT plugin ==

Parts of this package are licensed under the GPL, and others are
licensed under the LGPL and EPL.  Please refer to the COPYING
and LICENSE files for the complete licenses within each package,
and please refer to the individual source file header to determine
which license covers it.


This package is actually composed of three major components:

  org.spearce.jgit/

    A pure Java library capable of being run standalone, with no
    additional support libraries.  Some JUnit tests are provided
    to exercise the library.  The library provides functions to
    read and write a GIT formatted repository.

    All portions of jgit are covered by the GPL.  Absolute no EPL
    contributions are accepted within this package.

  org.spearce.egit.core/

    An Eclipse plugin providing an interface to org.spearce.jgit
    and support routines to allow processing against the Eclipse
    workspace and resource APIs, rather than the standard Java
    file APIs.  It also supplies the team provider implementation.

    Portions of this package are covered under the LGPL and others
    under the EPL.  Refer to individual file headers for details.

  org.spearce.egit.ui/

    An Eclipse plugin providing the user interface on top of
    org.spearce.egit.core.

    Portions of this package are covered under the LGPL and others
    under the EPL.  Refer to individual file headers for details.

  org.spearce.egit.core.test

    Unit tests for org.spearce.egit.core.

            == WARNINGS / CAVEATS              ==

- The plugin could lockup your Eclipse workbench.  I've tried to
  make it stable and function in such a way that it can't crash
  the workbench, but that doesn't mean it won't.  :-)

- This package might eat your files.  Everything I've added to a
  repository with it has unpacked properly both with itself and
  with the canonical C based implementation, but that doesn't mean
  it won't generate a corrupt object.

- Symbolic links are not supported because java does not support it.
  Such links could be damaged.

- It may take a long time to connect the GIT team provider to an
  existing project full of files as the cache tree needs to be
  generated from scratch.  This can take a while as most Java SHA1
  implementations are not exactly the fastest SHA1 implementations
  available.

- Only the timestamp of the index is used by jgit check if  the index
  is dirty.

- Don't try the plugin with a JDK other than 1.6 (Java 6) unless you
  are prepared to investigate problems yourself. JDK 1.5.0_11 and later
  Java 5 versions *may* work. Earlier versions do not. JDK 1.4 is *not*
  supported. Apple's Java 1.5.0_07 is reported to work acceptably. We
  have no information about other vendors. Please report your findings
  if you try.

            == Package Features                ==

  org.spearce.jgit/

    * Read loose and packed commits, trees, blobs, including
      deltafied objects.

    * Write loose commits, trees, blobs.

    * Write blobs from local files or Java InputStreams.

    * Read blobs as Java InputStreams.

    * Copy trees to local directory, or local directory to a tree.

    * Lazily loads trees as necessary.

    * Read and write .git/config files.

    * Create a new repository.

    * Read and write refs, including walking through symrefs.

    * Read, update and write the Git index.

  org.spearce.egit.core/

    * Supplies an Eclipse team provider.

    * Connect/disconnect the provider to a project.

    * Search for the repositories associated with a project by
      autodecting the GIT repository directories.

    * Store which repositories are tied to which containers in the
      Eclipse workspace.

    * Maintains a cache tree holding a snapshot of the workspace.
      The cache tree is diff'd against the current `HEAD` to show
      file status in the decorator.

    * Runs a checkpoint job to flush the cache tree to the repository
      on a periodic basis.

    * Tracks moves/renames/deletes and reflects them in the cache
      tree.

    * Resolves through linked containers.

    * Walk a the history from a given set of commits looking for commits
      introducing changed in a path.

  org.spearce.egit.ui/

    * Connect team provider wizard panels.

    * Connect to GIT team provider by making a new repository.

    * Connect to GIT team provider by searching local filesystem
      for existing repository directories.

    * Team actions: track (add), untrack (remove), disconnect, show
      history, compare version, show history.

    * Resource director shows file/directory state in the explorer
      various views (e.g. Navigator and Package Explorer).

    * Creating new commits or amending commits.

    * Graphical history viewer with the ability to compare versions
      using eclipse built-in compare editor.

            == Missing Features                ==

- GIT network protocol to pull objects from a remote repository or
  push objects to a remote repository.

- Common base computation for a merge base.

- Generate a GIT format patch.

- Apply a GIT format patch.

- Documentation.  :-)

- Windows support is new and very little tested. Do not blame us if
  it blows, but tell us about it and what you did. Double check
  everything.

- gitattributes support
  In particular CRLF conversion is not implemented. Files are treated
  as byte sequences.

- Speed in some areas
  Java is "slooow", they say. Not true as a general statement. A lot of Java
  code is slow because it it not optimized (to some extent due to this
  belief). Java has quite good performance although it cannot compete with
  C code written by good hackers simply because C can be optimized more than
  Java when you actually do it and have the skills to do it. Some areas of
  the plugin have been optimized but not all and not conclusively. In general
  however Java almost always needs more memory than an application written in 
  e.g. C. In particular there is an overhead from the rather large standard
  libraries that a normal Java installations comes with. See the ACM report:

	Prechelt, L. 1999. Technical opinion: comparing Java vs. C/C++ efficiency
	differences to interpersonal differences. Commun. ACM 42, 10 (Oct. 1999),
	109-112. DOI= http://doi.acm.org/10.1145/317665.317683  

  for an interesting comparison of C, C++ and Java. It is somewhat dated so
  the comparison involved Java 1.2, i.e. without hotspot in 1.3 and the shared
  runtime in 1.4. Those features made common Java applications many times faster 
  than with JDK 1.2.

  The conclusion from having about 30 programmers write a program to the same
  specification using their own choice of language (from C,C++ and Java) is
  that the skills  of the programmer is what determines the performance of the
  code rather than choice  of programming language.


            == About GIT                       ==

More information about GIT, its repository format, and the canonical
C based implementation can be obtained from the GIT websites:

  http://git.or.cz/
  http://www.kernel.org/pub/software/scm/git/
  http://www.kernel.org/pub/software/scm/git/docs/
